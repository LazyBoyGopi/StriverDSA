import java.util.*;
public class PracticeSession {
    private static void swap(int[]ar,int i,int j)
    {
        int temp = ar[i];
        ar[i] = ar[j];
        ar[j] = temp;
    }
    private static void selectionSort(int[]ar)
    {
        for(int i=0;i<ar.length;i++)
        {
            int idx = i;
            for(int j=i+1;j<ar.length;j++)
            {
                if(ar[j] < ar[idx]) idx = j;
            }
            if(idx != i) swap(ar,idx,i);
        }
    }
    private static void bubbleSort(int[]ar)
    {
        for(int i=0;i<ar.length;i++)
        {
            boolean b = true;
            for(int j=1;j<ar.length-i;j++)
            {
                if(ar[j] < ar[j-1]) {
                    swap(ar, j-1, j);
                    b = false;
                }
            }
            if(b) break;
        }
    }
    private static void insertionSort(int[]ar)
    {
        for(int i=1;i<ar.length;i++)
        {
            int j = i;
            while(j>0 && ar[j-1] > ar[j])
            {
                swap(ar, j-1, j);
                j--;
            }
        }
    }
    private static void conquer(int[]ar,int st , int mid, int end)
    {
        int[]ans = new int[end-st+1];
        int idx = 0  , idx1 = st , idx2 = mid+1;
        while(idx1 <= mid && idx2 <= end)
        {
            if(ar[idx1] > ar[idx2]) ans[idx++] = ar[idx2++];
            else ans[idx++] = ar[idx1++];
        }
        while(idx1 <= mid)
        {
            ans[idx++] = ar[idx1++];
        }
        while(idx2 <= end)
        {
            ans[idx++] = ar[idx2++];
        }
        for(int i=0,j=st;i<ans.length;i++,j++)
        {
            ar[j] = ans[i];
        }
    }
    private static void helperMergeSort(int[]ar,int st , int end)
    {
        if(st >= end) return;
        int mid = st+(end-st)/2;
        helperMergeSort(ar, st, mid);
        helperMergeSort(ar, mid+1, end);
        conquer(ar,st,mid,end);
    }
    private static void mergeSort(int[]ar)
    {
        helperMergeSort(ar,0,ar.length-1);
    }
    private static int getPivotIdx(int[]ar,int low, int high)
    {
        int pivot = ar[low];
        int i = low, j = high;
        while(i<j)
        {
            while(i<=high && ar[i] <= pivot) i++;
            while(j>=low && ar[j] > pivot) j--;
            if(i<j) swap(ar, i, j);
        }
        swap(ar, low, j);
        return j;
    }
    private static void helperQuickSort(int[]ar , int low , int high)
    {
        if(low <= high)
        {
            int pivotIdx = getPivotIdx(ar, low, high);
            helperQuickSort(ar, low, pivotIdx-1);
            helperQuickSort(ar, pivotIdx+1,high);
        }
    }
    private static void quickSort(int[]ar)
    {
        helperQuickSort(ar,0,ar.length-1);
    }
    public static void main(String[] args) {
        int[]ar = {4,8,23,4,5,2,14,5,76,8,8,54,32,2};
        quickSort(ar);
        System.out.println(Arrays.toString(ar));
    }
}
