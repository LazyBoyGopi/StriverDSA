//Brute Force


class Solution {
    public static double findSmallestMaxDist(int stations[], int k) {
        // code here
        int len = stations.length;
        int []howMany = new int[len-1];
        while(k > 0){
            double max = -1.0;
            int idx = -1;
            for(int i=0;i<len-1;i++){
                double cur = ((double)stations[i+1]-stations[i])/(double)howMany[i]+1;
                if(cur > max){
                    max = cur;
                    idx = i;
                }
            }
            howMany[idx]++;
            k--;
        }
        double max = -1;
        for(int i=0;i<len-1;i++){
            double diff = (double)(stations[i+1]-stations[i]);
            double curMax = (diff)/((double)howMany[i]+1);
            max = Math.max(max,curMax);
        }
        return max;
    }
    
}









// Better

import java.util.*;
class Element{
    double value;
    int idx;
    public Element(double value,int idx){
        this.value = value;
        this.idx = idx;
    }
}
class ElementComparator implements Comparator<Element>{
    @Override
    public int compare(Element e1 ,Element e2){
        return Double.compare(e2.value,e1.value);
    }
}

public class Solution {
    public static double MinimiseMaxDistance(int []arr, int k){
        // Write your code here.
        int len = arr.length;
        int[]howMany = new int[len-1];
        Queue<Element> q = new PriorityQueue<>(new ElementComparator());
        for(int i=0;i<len-1;i++){
            q.offer(new Element((double)arr[i+1]-(double)arr[i],i));
        }
        while(k > 0){
            Element e = q.poll();
            int idx = e.idx;
            howMany[idx]++;
            double dis = ((double)arr[idx+1]-arr[idx])/((double)howMany[idx]+1);
            q.offer(new Element(dis,idx));
            k--;
        }
        return q.poll().value;
    }
}



//Optimised


class Solution {
    static private int countStations(int[]stations,double mid){
        int count = 0;
        for(int i=0;i<stations.length-1;i++){
            int inBetween = (int)((stations[i+1]-stations[i])/mid);
            if(stations[i+1]-stations[i] == inBetween*mid) inBetween--;
            count += inBetween;
        }
        return count;
    }
    private static double maxDis(int[]stations){
        int dis = -1;
        for(int i=0;i<stations.length-1;i++){
            int curDis = stations[i+1]-stations[i];
            dis = Math.max(dis,curDis);
        }
        return dis;
    }
    public static double findSmallestMaxDist(int stations[], int k) {
       double st = 0 , end = maxDis(stations);
       double diff = 1e-6;
       while(end-st > diff){
           double mid = (st+end)/2.0;
           int numOfStations = countStations(stations,mid);
           if(numOfStations > k) st = mid;
           else end = mid;
       }
       return end;
    }
}
