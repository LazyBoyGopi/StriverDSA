import java.util.*;

class Element{
    double value;
    int idx;
    public Element(double value,int idx){
        this.value = value;
        this.idx = idx;
    }
}
class ElementComparator implements Comparator<Element>{
    @Override
    public int compare(Element e1 ,Element e2){
        return Double.compare(e2.value,e1.value);
    }
}

public class Solution {
    public static double MinimiseMaxDistance(int []arr, int k){
        // Write your code here.
        int len = arr.length;
        int[]howMany = new int[len-1];
        Queue<Element> q = new PriorityQueue<>(new ElementComparator());
        for(int i=0;i<len-1;i++){
            q.offer(new Element((double)arr[i+1]-(double)arr[i],i));
        }
        while(k > 0){
            Element e = q.poll();
            int idx = e.idx;
            howMany[idx]++;
            double dis = ((double)arr[idx+1]-arr[idx])/((double)howMany[idx]+1);
            q.offer(new Element(dis,idx));
            k--;
        }
        return q.poll().value;
    }
}
