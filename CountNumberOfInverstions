public class Solution {
    private static int conquer(int[]ar,int st,int mid,int end)
    {
        int [] newAr = new int[end-st+1];
        int idx = 0 , idx1 = st , idx2 = mid+1;
        int count=0;
        while(idx1 <= mid && idx2 <= end)
        {
            if(ar[idx1] <= ar[idx2])
            {
                newAr[idx++] = ar[idx1++];
            }
            else{
                count += (mid-idx1+1);
                newAr[idx++]  = ar[idx2++];
            }
        }
        while(idx1 <= mid)
        {
            newAr[idx++] = ar[idx1++];
        }
        while(idx2 <= end)
        {
            newAr[idx++] = ar[idx2++];
        }
        for(int i=0,j=st;i<newAr.length;i++,j++) ar[j] = newAr[i];
        return count;
    }
    private static int mergeSort(int[]ar,int st,int end)
    {
        int count = 0;
        if(st >= end) return count;
        int mid = st+(end-st)/2;
        count += mergeSort(ar, st, mid);
        count += mergeSort(ar, mid+1, end);
        count += conquer(ar,st,mid,end);
        return count;
    }
    public static int numberOfInversions(int []a, int n) {
       return mergeSort(a,0,a.length-1);
    }
}
