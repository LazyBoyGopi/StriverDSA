
//Brute Force

class Solution {
    private int[]merge(int[]nums1,int[]nums2){
        int idx1 = 0 , idx2 = 0 , idx = 0 , len1 = nums1.length , len2 = nums2.length;
        int[]nums = new int[len1+len2];
        while(idx1 < len1 && idx2 < len2){
            if(nums1[idx1] > nums2[idx2]){
                nums[idx++] = nums2[idx2++];
            }else{
                nums[idx++] = nums1[idx1++];
            }
        }
        while(idx1 < len1) nums[idx++] = nums1[idx1++];
        while(idx2 < len2) nums[idx++] = nums2[idx2++];
        return nums;
    }
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int []nums = merge(nums1,nums2);
        if(nums.length % 2 == 0){
            int mid = nums.length/2;
            double sum = (double)nums[mid]+nums[mid-1];
            return sum/2;
        }
        return nums[nums.length/2];
    }
}



// Better 


class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int len1 = nums1.length , len2 = nums2.length , e1 = -1 , e2 = -1 , i = 0 , j = 0 , m2 = (len1+len2)/2 , m1 = m2-1 , c1 = 0 ;
        while(i < len1 && j < len2){
            if(nums1[i] < nums2[j]){
                if(c1 == m1) e1 = nums1[i];
                if(c1 == m2) e2 = nums1[i];
                i++;
            }
            else{
                if(c1 == m1) e1 = nums2[j];
                if(c1 == m2) e2 = nums2[j];
                j++;
            }
            c1++;
            if(e1 != -1 && e2 != -1) break;
        }
        while(i < len1){
            if(c1 == m1) e1 = nums1[i];
            if(c1 == m2) e2 = nums1[i];
            i++;
            c1++;
            if(e1 != -1 && e2 != -1) break;
        }
        while(j < len2){
            if(c1 == m1) e1 = nums2[j];
            if(c1 == m2) e2 = nums2[j];
            j++;
            c1++;
            if(e1 != -1 && e2 != -1) break;
        }
        if((len1+len2) %2 == 0){
            if(e1 == -1) return e2;
            if(e2 == -1) return e1;
            return ((double)e1+e2)/2;
        }
        return e2;
    }
}


// Optimised  (Binary Search)


class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int n1 = nums1.length , n2 = nums2.length;
        if(n1 > n2) return findMedianSortedArrays(nums2,nums1);
        
        int n = n1+n2 , half = (n+1) >> 1 , low = 0 , high = n1;

        while(low <= high){
            int mid1 = (low+high) >> 1;
            int mid2 = half-mid1;

            int l1 = mid1 > 0 ? nums1[mid1-1] : Integer.MIN_VALUE;
            int l2 = mid2 > 0 ? nums2[mid2-1] : Integer.MIN_VALUE;
            int r1 = mid1 < n1 ? nums1[mid1] : Integer.MAX_VALUE;
            int r2 = mid2 < n2 ? nums2[mid2] : Integer.MAX_VALUE;

            if(l1 <= r2 && l2 <= r1){
                if(n % 2 == 0) return ((double)(Math.max(l1,l2)+Math.min(r1,r2))) / 2.0;
                return Math.max(l1,l2);
            }
            else if(l1 > r2) high = mid1-1;
            else low = mid1+1;
        }
        return 0.0;
    }
}
